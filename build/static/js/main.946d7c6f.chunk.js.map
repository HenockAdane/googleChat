{"version":3,"sources":["logo.svg","JScomponents/firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","dataBase","firestore","googleLogin","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithPopup","signOut","then","res","console","log","App","useState","user","message","one","state","setState","useEffect","onAuthStateChanged","ps","lit","useCollectionData","collection","get","docs","map","a","data","loggedInPage","onClick","className","id","uid","src","accountImg","messages","type","onChange","e","target","value","add","photoURL","dateCreated","Date","loggedOutPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,6JCczCC,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,6CAKF,IAAMC,EAAOT,IAASS,OAChBC,EAAWV,IAASW,YAGpBC,EAAc,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBAEnC,OADAD,EAASE,oBAAoB,CAACC,OAAQ,mBAC/BP,EAAKQ,gBAAgBJ,IAGnBK,EAAU,WACnB,OAAOT,EAAKS,UAAUC,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAI,kB,QCgGrCC,MAnHf,WAAgB,IAAD,EAEaC,oBAAS,iBAAM,CAACC,KAAM,KAAMC,QAAS,GAAIC,IAAK,OAF3D,mBAENC,EAFM,KAECC,EAFD,KAQbC,qBAAU,WACRrB,EAAKsB,oBAAmB,SAAAN,GAEtBI,GAAS,SAAAG,GAAE,kCAASA,GAAT,IAAaP,KAAMA,YAe/B,IAEH,IAAIQ,EAAMC,YAAkBxB,EAASyB,WAAW,aAAa,GAG7DL,qBAAU,WAERpB,EAASyB,WAAW,YAAYC,MAAMjB,MAAK,SAAAC,GACtCA,EAAIiB,MACPR,GAAS,SAAAG,GAAE,kCAASA,GAAT,IACTL,IAAKP,EAAIiB,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,oBAY5B,CAACP,IAGJZ,QAAQC,IAAIW,GAEZ,IAgCIQ,EAAiB,6BACrB,4BAAQC,QAASxB,GAAjB,WACA,yBAAKyB,UAAU,aACf,4BAnCe,WACb,GAAIf,EAAMH,KACR,OAAOG,EAAMD,IAAIW,KAAI,SAAAC,GAAC,OAAIA,EAAEK,KAAOhB,EAAMH,KAAKoB,IAAO,wBAAIF,UAAU,QAAO,2BAAIJ,EAAEb,SAAY,qCAAKoB,KAAG,EAACH,UAAU,OAAnB,MAA8BJ,EAAEQ,cAAuB,wBAAIJ,UAAU,YAAW,qCAAKG,KAAG,EAACH,UAAU,OAAnB,MAA8BJ,EAAEQ,aAAa,2BAAIR,EAAEb,aAkChOsB,IAGH,2BAAOC,KAAK,OAAOC,SA/BC,SAACC,GACnB,IAAMzB,EAAUyB,EAAEC,OAAOC,MACzBxB,GAAS,SAAAG,GAAE,kCAASA,GAAT,IAAaN,QAASA,QA6BO2B,MAAOzB,EAAMF,UACtDE,EAAMF,QACP,4BAAQgB,QA5BY,WACfd,EAAMF,UACPhB,EAASyB,WAAW,YAAYmB,IAAI,CAClCV,GAAIhB,EAAMH,KAAKoB,IACfE,WAAYnB,EAAMH,KAAK8B,SACvB7B,QAASE,EAAMF,QACf8B,YAAa,IAAIC,OAInB5B,GAAS,SAAAG,GAAE,kCAASA,GAAT,IAAaN,QAAS,QACjCL,QAAQC,IAAIM,EAAMH,KAAK8B,aAiB3B,UAKIG,EAAiB,6BACvB,+CACE,4BAAQhB,QAAS9B,GAAjB,iBAGA,OACE,yBAAK+B,UAAU,OACb,2CACCf,EAAMH,KAAOgB,EAAeiB,ICvGfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMjD,c","file":"static/js/main.946d7c6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport firebase from \"firebase\"\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAN6t0_kyxnzx9ce5KBLui378idzRr92TM\",\r\n    authDomain: \"superchat-41e8a.firebaseapp.com\",\r\n    databaseURL: \"https://superchat-41e8a.firebaseio.com\",\r\n    projectId: \"superchat-41e8a\",\r\n    storageBucket: \"superchat-41e8a.appspot.com\",\r\n    messagingSenderId: \"10084442628\",\r\n    appId: \"1:10084442628:web:81298f8b5e66710e2a4b51\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export const auth = firebase.auth();\r\n  export const dataBase = firebase.firestore()\r\n\r\n\r\n  export const googleLogin = () => {\r\n      const provider = new firebase.auth.GoogleAuthProvider();\r\n      provider.setCustomParameters({prompt: \"select_account\"});\r\n      return auth.signInWithPopup(provider)\r\n  }\r\n\r\n  export const signOut = () => {\r\n      return auth.signOut().then(res => console.log(\"logged out\"))\r\n  }\r\n  \r\n\r\n// function firebase() {\r\n//     return (\r\n//         <div>\r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default firebase\r\n","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport firebase, { database } from \"firebase\"\nimport { auth, googleLogin, signOut, dataBase } from \"./JScomponents/firebase\"\nimport {useCollectionData} from \"react-firebase-hooks/firestore\"\n\n\nfunction App() {\n\n  const [state, setState] = useState(()=> ({user: null, message: \"\", one: []}))\n\n  // auth.onAuthStateChanged(user => {\n  //   setState(ps => ({...ps, user: user}))\n  // })\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n\n      setState(ps => ({...ps, user: user}))\n\n      /*const collection = {\n        \"messages\":\n      }\n      \n      get() gets the \"messages\" collection which returns a promise cuz its async\n      res.docs returns the docs that are within that collection as an array e.g [doc1, doc2]\n      res.docs.data() returns the data within the docs e.g res.docs.forEach(a => console.log(a.data()))*/\n\n\n    \n\n    })\n\n  }, [])\n\n  let lit = useCollectionData(dataBase.collection(\"messages\"))[0]\n \n\n  useEffect(()=> {\n\n    dataBase.collection(\"messages\").get().then(res => {\n     if (res.docs){\n      setState(ps => ({...ps, \n        one: res.docs.map(a => a.data())\n      \n      }))\n\n     }\n\n      \n\n      \n    })\n\n\n  }, [lit])\n \n\n  console.log(lit)\n\n  let messages = () => {\n    if (state.user){\n      return state.one.map(a => a.id === state.user.uid ? (<li className=\"sent\"><p>{a.message}</p><img src className=\"img\" src={a.accountImg}/></li>) : (<li className=\"received\"><img src className=\"img\" src={a.accountImg}/><p>{a.message}</p></li>))\n    }\n  }\n\n\n\n  const inputChange = (e) => {\n    const message = e.target.value;\n    setState(ps => ({...ps, message: message}))\n  }\n\n  const sendMessage = () => {\n    if(state.message){\n      dataBase.collection(\"messages\").add({\n        id: state.user.uid,\n        accountImg: state.user.photoURL,\n        message: state.message,\n        dateCreated: new Date()\n      })\n      \n\n      setState(ps => ({...ps, message: \"\"}))\n      console.log(state.user.photoURL)\n\n    }\n\n  }\n\n\n  \nconst loggedInPage = ( <div>\n  <button onClick={signOut}>SIGNOUT</button>\n  <div className=\"container\">\n  <ul>\n    {messages()}\n  </ul>\n\n  <input type=\"text\" onChange={inputChange} value={state.message}></input>\n  {state.message}\n  <button onClick={sendMessage}>send</button>\n  </div>  \n</div> )\n\n\nconst loggedOutPage = (<div>\n<h1>SIGN IN TO CHAT</h1>\n  <button onClick={googleLogin}>GOOGLE LOGIN</button>\n</div>)\n\n  return (\n    <div className=\"App\">\n      <h1>Hello there</h1>\n      {state.user ? loggedInPage : loggedOutPage}\n\n\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}